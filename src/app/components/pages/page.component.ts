/**
 ** Author: Bex
 **
 ** Page component that all page components shall extend.
 **
 ** Handles static meta tags for each page passed via the constructor.
 **
 ** The tags can be updated dynamically via the updatePageMeta method or the
 ** Meta service.
 **
 ** DO NOT EDIT THIS FILE WITHOUT PERMISSION!
 **/

import {BaseComponent} from '../base.component';
import {Meta} from '@angular/platform-browser';
import {OnDestroy} from '@angular/core';
import {OnInit} from '@angular/core';
import {Subscription} from 'rxjs/Subscription';
import {SystemLanguagesResolver} from '../../resolvers/system-languages/system-languages.resolver';
import {TranslateService} from '@ngx-translate/core';
import {UserResolver} from '../../resolvers/user/user.resolver';

export interface PageMeta {
  title: {translate: boolean, content: string},
  description: {translate: boolean, content: string},
  image?: {content: string},
  translateParams?: any
}

export abstract class PageComponent extends BaseComponent implements OnInit, OnDestroy {

  private metaTranslationsSubscription: Subscription;

  public constructor (
    private pageMeta: PageMeta,
    protected document: any,
    protected meta: Meta,
    protected systemLanguagesResolver: SystemLanguagesResolver,
    protected translateService: TranslateService,
    protected userResolver: UserResolver,
  ) {
    super(systemLanguagesResolver, userResolver);
  }

  public ngOnInit(): void {

    this.updatePageMeta(this.pageMeta);

    super.ngOnInit();
  }

  protected updatePageMeta(pageMeta: PageMeta) {
    if (this.metaTranslationsSubscription) { this.metaTranslationsSubscription.unsubscribe(); }

    this.pageMeta = pageMeta;

    this.metaTranslationsSubscription = this.translateService.get([this.pageMeta.title.content, this.pageMeta.description.content], this.pageMeta.translateParams)
      .concat(this.translateService.onLangChange.map(event => event.translations))
      .subscribe(translations => {
        if (this.pageMeta.title.translate) {
          this.meta.updateTag({
            content: translations[this.pageMeta.title.content]
          },
            'property="og:title"'
          );
        } else {
          this.meta.updateTag({
            content: this.pageMeta.title.content
          },
            'property="og:title"'
          );
        }

        if (this.pageMeta.description.translate) {
          this.meta.updateTag({
            content: translations[this.pageMeta.description.content]
          },
            'name="description"'
          );

          this.meta.updateTag({
            content: translations[this.pageMeta.description.content]
          },
            'property="og:description"'
          );
        } else {
          this.meta.updateTag({
            content: this.pageMeta.description.content
          },
            'name="description"'
          );

          this.meta.updateTag({
            content: this.pageMeta.description.content
          },
            'property="og:description"'
          );
        }

        if (this.pageMeta.image) {
          this.meta.updateTag({
            content: this.pageMeta.image.content
          },
            'property=og:image'
          );
        }

        this.meta.updateTag({
          content: this.document.location.href
        },
          'property="og:url"'
        );

        this.meta.updateTag({
          content: this.systemLanguagesResolver.getSelectedSystemLanguageCode()
        },
          'property="og:locale"'
        );

        for (let language of this.systemLanguagesResolver.getSystemLanguages()) {
          this.meta.addTag({ property: 'og:locale:alternate', content: language.languageCode });
        }
      });
  }

  public ngOnDestroy(): void {
    if (this.metaTranslationsSubscription) { this.metaTranslationsSubscription.unsubscribe(); }
    super.ngOnDestroy();
  }
}
